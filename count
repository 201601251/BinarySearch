/*
Given a sorted array of integers, find the number of occurrences of a given target value.
Your algorithmâ€™s runtime complexity must be in the order of O(log n).
If the target is not found in the array, return 0

**Example : **
Given [5, 7, 7, 8, 8, 10] and target value 8,
return 2.

*/

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int findCount(final List<Integer> A, int B) {
        int low = 0;
        int high = A.size()-1;
        int result = -1;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(A.get(mid) == B){
                result = mid;
                high = mid-1;
            }
            else if(B < A.get(mid)) high = mid-1;
            else low = mid + 1;
        }
        low = 0;
        high = A.size() - 1;
        int result2 = -1;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(A.get(mid) == B){
                result2 = mid;
                low = mid + 1;
            }
            else if(B < A.get(mid)) high = mid-1;
            else low = mid + 1;
        }
        return result2 - result + 1;
    }
}
